import Body
import sys

class Object:
    
    __slots__ = ['_headers', '_bodies']

    def __init__(self):
        self._headers = []
        self._bodies = []
    
    # adds a header to our object
    # requires three arguments key, required, and value
    def addHeader(self, k, r, v):
        header = {}
        header['key'] = k
        header['required'] = r
        header['value'] = v
        self._headers.append(header)
    
    # returns the number of headers
    def numHeader(self):
        return len(self._headers)

    def getHeaderAt(self, id):
        if not id:
            id=0 
        return self._headers[id]
    
    # adds a body to our bodys object
    # requires three arguments target, response, and value
    def addBody(self, t, r, v, ty):
        if not ty:
            ty="unknown" 
        body = Body.Body()
        body.target = t
        body.response = r
        body.value = v
        body.type = ty
        self._bodies.append(body)

    # returns the number of body elements
    def numBody(self):
        return len(self._bodies)

    # returns the body element at a specific index
    def getBodyAt(self, id):
        if not id:
            id=0 
        return self._bodies[id]

    def pseudo_query(self, Cursor):
    
        serverInfo = {}
        columnNames = []
        columnTypes = []
        
        import pprint
        pp = pprint.PrettyPrinter();
        
        for desc in Cursor.description:
            columnNames.append(desc[0])
            columnTypes.append(desc[1])
        
        serverInfo["initialData"] = Cursor.fetchall()
        serverInfo["columnNames"] = columnNames
        serverInfo["totalCount"] = Cursor.rowcount

        serverInfo["id"] = "AMFPython"
        serverInfo["cursor"] = 1
        serverInfo["serviceName"] = "doStuff"
        serverInfo["version"] = 1

        setattr(self, "serverInfo", serverInfo)
        setattr(self, "_explicitType", "RecordSet")
        setattr(self, "__columnTypes__", columnTypes)

