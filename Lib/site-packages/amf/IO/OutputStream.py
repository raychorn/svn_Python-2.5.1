import struct
import sys

class OutputStream:
    
    outBuffer = ""
    
    # write a single byte
    def writeByte(self, b):
        # use pack with the c flag
        self.outBuffer += struct.pack("c", b)

    # write 2 bytes
    def writeInt(self,n):
        # use pack with the n flag
        self.outBuffer += struct.pack(">H", n)

    # write 4 bytes
    def writeLong(self,l):
        # use pack with the N flag
        self.outBuffer += struct.pack(">L", l)

    # write a string
    def writeUTF(self,s):
        if not s:
            s = ""
        if len(s) < 65535:
            self.writeInt(len(s))
        else:
            self.writeLong(len(s))
        # write the string chars
        self.outBuffer += s

    #write a long string
    def writeLongUTF(self,s):
        if not s:
            s = ""
        # write the string length - max 65536
        self.writeLong(len(s))
        # write the string chars
        self.outBuffer += s

    # write a double
    def writeDouble(self,d):

        # pack the bytes
        b = struct.pack(">d", d)
        # add the bytes to the output
        self.outBuffer += b
        
    # send the output buffer
    def flush(self):
        # flush typically empties the buffer
        # but this is not a persistent pipe so it's not needed really here
        # plus it's useful to be able to flush to a file and to the client simultaneously
        # with out have to create another method just to peek at the buffer contents.
        return self.outBuffer
    
