# -*- coding: mbcs -*-
# Created by makepy.py version 0.4.95
# By python version 2.5.1 (r251:54863, Apr 18 2007, 08:51:08) [MSC v.1310 32 bit (Intel)]
# From type library '{000C1092-0000-0000-C000-000000000046}'
# On Mon Nov 19 09:00:52 2007
"""Microsoft Windows Installer Object Library"""
makepy_version = '0.4.95'
python_version = 0x20501f0

import win32com.client.CLSIDToClass, pythoncom
import win32com.client.util
from pywintypes import IID
from win32com.client import Dispatch

# The following 3 lines may need tweaking for the particular server
# Candidates are pythoncom.Missing, .Empty and .ArgNotFound
defaultNamedOptArg=pythoncom.Empty
defaultNamedNotOptArg=pythoncom.Empty
defaultUnnamedArg=pythoncom.Empty

CLSID = IID('{000C1092-0000-0000-C000-000000000046}')
MajorVersion = 1
MinorVersion = 0
LibraryFlags = 8
LCID = 0x409

class constants:
	msiDatabaseNullInteger        =-2147483648 # from enum Constants
	msiColumnInfoNames            =0x0        # from enum MsiColumnInfo
	msiColumnInfoTypes            =0x1        # from enum MsiColumnInfo
	msiCostTreeChildren           =0x1        # from enum MsiCostTree
	msiCostTreeParents            =0x2        # from enum MsiCostTree
	msiCostTreeSelfOnly           =0x0        # from enum MsiCostTree
	msiDatabaseStateRead          =0x0        # from enum MsiDatabaseState
	msiDatabaseStateWrite         =0x1        # from enum MsiDatabaseState
	msiDoActionStatusBadActionData=0x7        # from enum MsiDoActionStatus
	msiDoActionStatusFailure      =0x3        # from enum MsiDoActionStatus
	msiDoActionStatusFinished     =0x5        # from enum MsiDoActionStatus
	msiDoActionStatusNoAction     =0x0        # from enum MsiDoActionStatus
	msiDoActionStatusSuccess      =0x1        # from enum MsiDoActionStatus
	msiDoActionStatusSuspend      =0x4        # from enum MsiDoActionStatus
	msiDoActionStatusUserExit     =0x2        # from enum MsiDoActionStatus
	msiDoActionStatusWrongState   =0x6        # from enum MsiDoActionStatus
	msiEvaluateConditionError     =0x3        # from enum MsiEvaluateCondition
	msiEvaluateConditionFalse     =0x0        # from enum MsiEvaluateCondition
	msiEvaluateConditionNone      =0x2        # from enum MsiEvaluateCondition
	msiEvaluateConditionTrue      =0x1        # from enum MsiEvaluateCondition
	msiInstallContextAllUserManaged=0x8        # from enum MsiInstallContext
	msiInstallContextFirstVisible =0x0        # from enum MsiInstallContext
	msiInstallContextMachine      =0x4        # from enum MsiInstallContext
	msiInstallContextUser         =0x2        # from enum MsiInstallContext
	msiInstallContextUserManaged  =0x1        # from enum MsiInstallContext
	msiInstallModeDefault         =0x0        # from enum MsiInstallMode
	msiInstallModeExisting        =-1         # from enum MsiInstallMode
	msiInstallModeNoDetection     =-2         # from enum MsiInstallMode
	msiInstallModeNoSourceResolution=-3         # from enum MsiInstallMode
	msiInstallSourceTypeMedia     =0x4        # from enum MsiInstallSourceType
	msiInstallSourceTypeNetwork   =0x1        # from enum MsiInstallSourceType
	msiInstallSourceTypeURL       =0x2        # from enum MsiInstallSourceType
	msiInstallSourceTypeUnknown   =0x0        # from enum MsiInstallSourceType
	msiInstallStateAbsent         =0x2        # from enum MsiInstallState
	msiInstallStateAdvertised     =0x1        # from enum MsiInstallState
	msiInstallStateBadConfig      =-6         # from enum MsiInstallState
	msiInstallStateBroken         =0x0        # from enum MsiInstallState
	msiInstallStateDefault        =0x5        # from enum MsiInstallState
	msiInstallStateIncomplete     =-5         # from enum MsiInstallState
	msiInstallStateInvalidArg     =-2         # from enum MsiInstallState
	msiInstallStateLocal          =0x3        # from enum MsiInstallState
	msiInstallStateNotUsed        =-7         # from enum MsiInstallState
	msiInstallStateRemoved        =0x1        # from enum MsiInstallState
	msiInstallStateSource         =0x4        # from enum MsiInstallState
	msiInstallStateSourceAbsent   =-4         # from enum MsiInstallState
	msiInstallStateUnknown        =-1         # from enum MsiInstallState
	msiInstallTypeDefault         =0x0        # from enum MsiInstallType
	msiInstallTypeNetworkImage    =0x1        # from enum MsiInstallType
	msiInstallTypeSingleInstance  =0x2        # from enum MsiInstallType
	msiMessageStatusAbort         =0x3        # from enum MsiMessageStatus
	msiMessageStatusCancel        =0x2        # from enum MsiMessageStatus
	msiMessageStatusError         =-1         # from enum MsiMessageStatus
	msiMessageStatusIgnore        =0x5        # from enum MsiMessageStatus
	msiMessageStatusNo            =0x7        # from enum MsiMessageStatus
	msiMessageStatusNone          =0x0        # from enum MsiMessageStatus
	msiMessageStatusOk            =0x1        # from enum MsiMessageStatus
	msiMessageStatusRetry         =0x4        # from enum MsiMessageStatus
	msiMessageStatusYes           =0x6        # from enum MsiMessageStatus
	msiMessageTypeAbortRetryIgnore=0x2        # from enum MsiMessageType
	msiMessageTypeActionData      =0x9000000  # from enum MsiMessageType
	msiMessageTypeActionStart     =0x8000000  # from enum MsiMessageType
	msiMessageTypeCommonData      =0xb000000  # from enum MsiMessageType
	msiMessageTypeDefault1        =0x0        # from enum MsiMessageType
	msiMessageTypeDefault2        =0x100      # from enum MsiMessageType
	msiMessageTypeDefault3        =0x200      # from enum MsiMessageType
	msiMessageTypeError           =0x1000000  # from enum MsiMessageType
	msiMessageTypeFatalExit       =0x0        # from enum MsiMessageType
	msiMessageTypeFilesInUse      =0x5000000  # from enum MsiMessageType
	msiMessageTypeInfo            =0x4000000  # from enum MsiMessageType
	msiMessageTypeOk              =0x0        # from enum MsiMessageType
	msiMessageTypeOkCancel        =0x1        # from enum MsiMessageType
	msiMessageTypeOutOfDiskSpace  =0x7000000  # from enum MsiMessageType
	msiMessageTypeProgress        =0xa000000  # from enum MsiMessageType
	msiMessageTypeResolveSource   =0x6000000  # from enum MsiMessageType
	msiMessageTypeRetryCancel     =0x5        # from enum MsiMessageType
	msiMessageTypeUser            =0x3000000  # from enum MsiMessageType
	msiMessageTypeWarning         =0x2000000  # from enum MsiMessageType
	msiMessageTypeYesNo           =0x4        # from enum MsiMessageType
	msiMessageTypeYesNoCancel     =0x3        # from enum MsiMessageType
	msiOpenDatabaseModeCreate     =0x3        # from enum MsiOpenDatabaseMode
	msiOpenDatabaseModeCreateDirect=0x4        # from enum MsiOpenDatabaseMode
	msiOpenDatabaseModeDirect     =0x2        # from enum MsiOpenDatabaseMode
	msiOpenDatabaseModePatchFile  =0x20       # from enum MsiOpenDatabaseMode
	msiOpenDatabaseModeReadOnly   =0x0        # from enum MsiOpenDatabaseMode
	msiOpenDatabaseModeTransact   =0x1        # from enum MsiOpenDatabaseMode
	msiReadStreamAnsi             =0x2        # from enum MsiReadStream
	msiReadStreamBytes            =0x1        # from enum MsiReadStream
	msiReadStreamDirect           =0x3        # from enum MsiReadStream
	msiReadStreamInteger          =0x0        # from enum MsiReadStream
	msiReinstallModeFileEqualVersion=0x8        # from enum MsiReinstallMode
	msiReinstallModeFileExact     =0x10       # from enum MsiReinstallMode
	msiReinstallModeFileMissing   =0x2        # from enum MsiReinstallMode
	msiReinstallModeFileOlderVersion=0x4        # from enum MsiReinstallMode
	msiReinstallModeFileReplace   =0x40       # from enum MsiReinstallMode
	msiReinstallModeFileVerify    =0x20       # from enum MsiReinstallMode
	msiReinstallModeMachineData   =0x80       # from enum MsiReinstallMode
	msiReinstallModePackage       =0x400      # from enum MsiReinstallMode
	msiReinstallModeShortcut      =0x200      # from enum MsiReinstallMode
	msiReinstallModeUserData      =0x100      # from enum MsiReinstallMode
	msiRunModeAdmin               =0x0        # from enum MsiRunMode
	msiRunModeAdvertise           =0x1        # from enum MsiRunMode
	msiRunModeCabinet             =0x8        # from enum MsiRunMode
	msiRunModeCommit              =0x12       # from enum MsiRunMode
	msiRunModeLogEnabled          =0x4        # from enum MsiRunMode
	msiRunModeMaintenance         =0x2        # from enum MsiRunMode
	msiRunModeOperations          =0x5        # from enum MsiRunMode
	msiRunModeRebootAtEnd         =0x6        # from enum MsiRunMode
	msiRunModeRebootNow           =0x7        # from enum MsiRunMode
	msiRunModeRollback            =0x11       # from enum MsiRunMode
	msiRunModeRollbackEnabled     =0x3        # from enum MsiRunMode
	msiRunModeScheduled           =0x10       # from enum MsiRunMode
	msiRunModeSourceShortNames    =0x9        # from enum MsiRunMode
	msiRunModeTargetShortNames    =0xa        # from enum MsiRunMode
	msiRunModeWindows9x           =0xc        # from enum MsiRunMode
	msiRunModeZawEnabled          =0xd        # from enum MsiRunMode
	msiSignatureInfoCertificate   =0x0        # from enum MsiSignatureInfo
	msiSignatureInfoHash          =0x1        # from enum MsiSignatureInfo
	msiSignatureOptionInvalidHashFatal=0x1        # from enum MsiSignatureOption
	msiTransformErrorAddExistingRow=0x1        # from enum MsiTransformError
	msiTransformErrorAddExistingTable=0x4        # from enum MsiTransformError
	msiTransformErrorChangeCodePage=0x20       # from enum MsiTransformError
	msiTransformErrorDeleteNonExistingRow=0x2        # from enum MsiTransformError
	msiTransformErrorDeleteNonExistingTable=0x8        # from enum MsiTransformError
	msiTransformErrorNone         =0x0        # from enum MsiTransformError
	msiTransformErrorUpdateNonExistingRow=0x10       # from enum MsiTransformError
	msiTransformErrorViewTransform=0x100      # from enum MsiTransformError
	msiTransformValidationEqual   =0x100      # from enum MsiTransformValidation
	msiTransformValidationGreater =0x400      # from enum MsiTransformValidation
	msiTransformValidationGreaterOrEqual=0x200      # from enum MsiTransformValidation
	msiTransformValidationLanguage=0x1        # from enum MsiTransformValidation
	msiTransformValidationLess    =0x40       # from enum MsiTransformValidation
	msiTransformValidationLessOrEqual=0x80       # from enum MsiTransformValidation
	msiTransformValidationMajorVer=0x8        # from enum MsiTransformValidation
	msiTransformValidationMinorVer=0x10       # from enum MsiTransformValidation
	msiTransformValidationNone    =0x0        # from enum MsiTransformValidation
	msiTransformValidationPlatform=0x4        # from enum MsiTransformValidation
	msiTransformValidationProduct =0x2        # from enum MsiTransformValidation
	msiTransformValidationUpdateVer=0x20       # from enum MsiTransformValidation
	msiTransformValidationUpgradeCode=0x800      # from enum MsiTransformValidation
	msiUILevelBasic               =0x3        # from enum MsiUILevel
	msiUILevelDefault             =0x1        # from enum MsiUILevel
	msiUILevelEndDialog           =0x80       # from enum MsiUILevel
	msiUILevelFull                =0x5        # from enum MsiUILevel
	msiUILevelHideCancel          =0x20       # from enum MsiUILevel
	msiUILevelNoChange            =0x0        # from enum MsiUILevel
	msiUILevelNone                =0x2        # from enum MsiUILevel
	msiUILevelProgressOnly        =0x40       # from enum MsiUILevel
	msiUILevelReduced             =0x4        # from enum MsiUILevel
	msiUILevelSourceResOnly       =0x100      # from enum MsiUILevel
	msiViewModifyAssign           =0x3        # from enum MsiViewModify
	msiViewModifyDelete           =0x6        # from enum MsiViewModify
	msiViewModifyInsert           =0x1        # from enum MsiViewModify
	msiViewModifyInsertTemporary  =0x7        # from enum MsiViewModify
	msiViewModifyMerge            =0x5        # from enum MsiViewModify
	msiViewModifyRefresh          =0x0        # from enum MsiViewModify
	msiViewModifyReplace          =0x4        # from enum MsiViewModify
	msiViewModifySeek             =-1         # from enum MsiViewModify
	msiViewModifyUpdate           =0x2        # from enum MsiViewModify
	msiViewModifyValidate         =0x8        # from enum MsiViewModify
	msiViewModifyValidateDelete   =0xb        # from enum MsiViewModify
	msiViewModifyValidateField    =0xa        # from enum MsiViewModify
	msiViewModifyValidateNew      =0x9        # from enum MsiViewModify

from win32com.client import DispatchBaseClass
class Database(DispatchBaseClass):
	CLSID = IID('{000C109D-0000-0000-C000-000000000046}')
	coclass_clsid = None

	def ApplyTransform(self, TransformFile=defaultNamedNotOptArg, ErrorConditions=defaultNamedNotOptArg):
		return self._oleobj_.InvokeTypes(10, LCID, 1, (24, 0), ((8, 1), (3, 1)),TransformFile
			, ErrorConditions)

	def Commit(self):
		return self._oleobj_.InvokeTypes(4, LCID, 1, (24, 0), (),)

	def CreateTransformSummaryInfo(self, ReferenceDatabase=defaultNamedNotOptArg, TransformFile=defaultNamedNotOptArg, ErrorConditions=defaultNamedNotOptArg, Validation=defaultNamedNotOptArg):
		return self._oleobj_.InvokeTypes(13, LCID, 1, (24, 0), ((9, 1), (8, 1), (3, 1), (3, 1)),ReferenceDatabase
			, TransformFile, ErrorConditions, Validation)

	# Result is of type UIPreview
	def EnableUIPreview(self):
		ret = self._oleobj_.InvokeTypes(11, LCID, 1, (9, 0), (),)
		if ret is not None:
			ret = Dispatch(ret, 'EnableUIPreview', '{000C109A-0000-0000-C000-000000000046}', UnicodeToString=0)
		return ret

	def Export(self, Table=defaultNamedNotOptArg, Folder=defaultNamedNotOptArg, File=defaultNamedNotOptArg):
		return self._oleobj_.InvokeTypes(7, LCID, 1, (24, 0), ((8, 1), (8, 1), (8, 1)),Table
			, Folder, File)

	def GenerateTransform(self, ReferenceDatabase=defaultNamedNotOptArg, TransformFile='0'):
		return self._ApplyTypes_(9, 1, (11, 32), ((9, 1), (8, 49)), 'GenerateTransform', None,ReferenceDatabase
			, TransformFile)

	# Result is of type SummaryInfo
	# The method GetSummaryInformation is actually a property, but must be used as a method to correctly pass the arguments
	def GetSummaryInformation(self, UpdateCount=0):
		ret = self._oleobj_.InvokeTypes(2, LCID, 2, (9, 0), ((3, 49),),UpdateCount
			)
		if ret is not None:
			ret = Dispatch(ret, 'GetSummaryInformation', '{000C109B-0000-0000-C000-000000000046}', UnicodeToString=0)
		return ret

	def Import(self, Folder=defaultNamedNotOptArg, File=defaultNamedNotOptArg):
		return self._oleobj_.InvokeTypes(6, LCID, 1, (24, 0), ((8, 1), (8, 1)),Folder
			, File)

	def Merge(self, Database=defaultNamedNotOptArg, ErrorTable='0'):
		return self._ApplyTypes_(8, 1, (11, 32), ((9, 1), (8, 49)), 'Merge', None,Database
			, ErrorTable)

	# Result is of type View
	def OpenView(self, Sql=defaultNamedNotOptArg):
		ret = self._oleobj_.InvokeTypes(3, LCID, 1, (9, 0), ((8, 1),),Sql
			)
		if ret is not None:
			ret = Dispatch(ret, 'OpenView', '{000C109C-0000-0000-C000-000000000046}', UnicodeToString=0)
		return ret

	# Result is of type Record
	# The method PrimaryKeys is actually a property, but must be used as a method to correctly pass the arguments
	def PrimaryKeys(self, Table=defaultNamedNotOptArg):
		ret = self._oleobj_.InvokeTypes(5, LCID, 2, (9, 0), ((8, 1),),Table
			)
		if ret is not None:
			ret = Dispatch(ret, 'PrimaryKeys', '{000C1093-0000-0000-C000-000000000046}', UnicodeToString=0)
		return ret

	# The method TablePersistent is actually a property, but must be used as a method to correctly pass the arguments
	def TablePersistent(self, Table=defaultNamedNotOptArg):
		return self._oleobj_.InvokeTypes(12, LCID, 2, (3, 0), ((8, 1),),Table
			)

	_prop_map_get_ = {
		"DatabaseState": (1, 2, (3, 0), (), "DatabaseState", None),
		# Method 'SummaryInformation' returns object of type 'SummaryInfo'
		"SummaryInformation": (2, 2, (9, 0), ((3, 49),), "SummaryInformation", '{000C109B-0000-0000-C000-000000000046}'),
	}
	_prop_map_put_ = {
	}

class FeatureInfo(DispatchBaseClass):
	CLSID = IID('{000C109F-0000-0000-C000-000000000046}')
	coclass_clsid = None

	_prop_map_get_ = {
		"Attributes": (3, 2, (3, 0), (), "Attributes", None),
		"Description": (2, 2, (8, 0), (), "Description", None),
		"Title": (1, 2, (8, 0), (), "Title", None),
	}
	_prop_map_put_ = {
		"Attributes" : ((3, LCID, 4, 0),()),
	}

class Installer(DispatchBaseClass):
	# This class is creatable by the name 'WindowsInstaller.Installer'
	CLSID = IID('{000C1090-0000-0000-C000-000000000046}')
	coclass_clsid = None

	def AddSource(self, Product=defaultNamedNotOptArg, User=defaultNamedNotOptArg, Source=defaultNamedNotOptArg):
		return self._oleobj_.InvokeTypes(43, LCID, 1, (24, 0), ((8, 1), (8, 1), (8, 1)),Product
			, User, Source)

	def ApplyMultiplePatches(self, PatchPackage=defaultNamedNotOptArg, Product=defaultNamedNotOptArg, PropertiesList=defaultNamedNotOptArg):
		return self._oleobj_.InvokeTypes(51, LCID, 1, (24, 0), ((8, 1), (8, 1), (8, 1)),PatchPackage
			, Product, PropertiesList)

	def ApplyPatch(self, PatchPackage=defaultNamedNotOptArg, InstallPackage=defaultNamedNotOptArg, InstallType=defaultNamedNotOptArg, CommandLine=defaultNamedNotOptArg):
		return self._oleobj_.InvokeTypes(22, LCID, 1, (24, 0), ((8, 1), (8, 1), (3, 1), (8, 1)),PatchPackage
			, InstallPackage, InstallType, CommandLine)

	def ClearSourceList(self, Product=defaultNamedNotOptArg, User=defaultNamedNotOptArg):
		return self._oleobj_.InvokeTypes(44, LCID, 1, (24, 0), ((8, 1), (8, 1)),Product
			, User)

	def CollectUserInfo(self, Product=defaultNamedNotOptArg):
		return self._oleobj_.InvokeTypes(21, LCID, 1, (24, 0), ((8, 1),),Product
			)

	# Result is of type StringList
	# The method ComponentClients is actually a property, but must be used as a method to correctly pass the arguments
	def ComponentClients(self, Component=defaultNamedNotOptArg):
		ret = self._oleobj_.InvokeTypes(38, LCID, 2, (9, 0), ((8, 1),),Component
			)
		if ret is not None:
			ret = Dispatch(ret, 'ComponentClients', '{000C1095-0000-0000-C000-000000000046}', UnicodeToString=0)
		return ret

	# The method ComponentPath is actually a property, but must be used as a method to correctly pass the arguments
	def ComponentPath(self, Product=defaultNamedNotOptArg, Component=defaultNamedNotOptArg):
		# Result is a Unicode object - return as-is for this version of Python
		return self._oleobj_.InvokeTypes(31, LCID, 2, (8, 0), ((8, 1), (8, 1)),Product
			, Component)

	# Result is of type StringList
	# The method ComponentQualifiers is actually a property, but must be used as a method to correctly pass the arguments
	def ComponentQualifiers(self, Category=defaultNamedNotOptArg):
		ret = self._oleobj_.InvokeTypes(34, LCID, 2, (9, 0), ((8, 1),),Category
			)
		if ret is not None:
			ret = Dispatch(ret, 'ComponentQualifiers', '{000C1095-0000-0000-C000-000000000046}', UnicodeToString=0)
		return ret

	def ConfigureFeature(self, Product=defaultNamedNotOptArg, Feature=defaultNamedNotOptArg, InstallState=defaultNamedNotOptArg):
		return self._oleobj_.InvokeTypes(28, LCID, 1, (24, 0), ((8, 1), (8, 1), (3, 1)),Product
			, Feature, InstallState)

	def ConfigureProduct(self, Product=defaultNamedNotOptArg, InstallLevel=defaultNamedNotOptArg, InstallState=defaultNamedNotOptArg):
		return self._oleobj_.InvokeTypes(19, LCID, 1, (24, 0), ((8, 1), (3, 1), (3, 1)),Product
			, InstallLevel, InstallState)

	# Result is of type Record
	def CreateRecord(self, Count=defaultNamedNotOptArg):
		ret = self._oleobj_.InvokeTypes(1, LCID, 1, (9, 0), ((3, 1),),Count
			)
		if ret is not None:
			ret = Dispatch(ret, 'CreateRecord', '{000C1093-0000-0000-C000-000000000046}', UnicodeToString=0)
		return ret

	def EnableLog(self, LogMode=defaultNamedNotOptArg, LogFile=defaultNamedNotOptArg):
		return self._oleobj_.InvokeTypes(7, LCID, 1, (24, 0), ((8, 1), (8, 1)),LogMode
			, LogFile)

	# The method Environment is actually a property, but must be used as a method to correctly pass the arguments
	def Environment(self, Variable=defaultNamedNotOptArg):
		# Result is a Unicode object - return as-is for this version of Python
		return self._oleobj_.InvokeTypes(12, LCID, 2, (8, 0), ((8, 1),),Variable
			)

	def ExtractPatchXMLData(self, PatchPath=defaultNamedNotOptArg):
		# Result is a Unicode object - return as-is for this version of Python
		return self._oleobj_.InvokeTypes(57, LCID, 1, (8, 0), ((8, 1),),PatchPath
			)

	# The method FeatureParent is actually a property, but must be used as a method to correctly pass the arguments
	def FeatureParent(self, Product=defaultNamedNotOptArg, Feature=defaultNamedNotOptArg):
		# Result is a Unicode object - return as-is for this version of Python
		return self._oleobj_.InvokeTypes(23, LCID, 2, (8, 0), ((8, 1), (8, 1)),Product
			, Feature)

	# The method FeatureState is actually a property, but must be used as a method to correctly pass the arguments
	def FeatureState(self, Product=defaultNamedNotOptArg, Feature=defaultNamedNotOptArg):
		return self._oleobj_.InvokeTypes(24, LCID, 2, (3, 0), ((8, 1), (8, 1)),Product
			, Feature)

	# The method FeatureUsageCount is actually a property, but must be used as a method to correctly pass the arguments
	def FeatureUsageCount(self, Product=defaultNamedNotOptArg, Feature=defaultNamedNotOptArg):
		return self._oleobj_.InvokeTypes(26, LCID, 2, (3, 0), ((8, 1), (8, 1)),Product
			, Feature)

	# The method FeatureUsageDate is actually a property, but must be used as a method to correctly pass the arguments
	def FeatureUsageDate(self, Product=defaultNamedNotOptArg, Feature=defaultNamedNotOptArg):
		return self._oleobj_.InvokeTypes(27, LCID, 2, (7, 0), ((8, 1), (8, 1)),Product
			, Feature)

	# Result is of type StringList
	# The method Features is actually a property, but must be used as a method to correctly pass the arguments
	def Features(self, Product=defaultNamedNotOptArg):
		ret = self._oleobj_.InvokeTypes(36, LCID, 2, (9, 0), ((8, 1),),Product
			)
		if ret is not None:
			ret = Dispatch(ret, 'Features', '{000C1095-0000-0000-C000-000000000046}', UnicodeToString=0)
		return ret

	def FileAttributes(self, FilePath=defaultNamedNotOptArg):
		return self._oleobj_.InvokeTypes(13, LCID, 1, (3, 0), ((8, 1),),FilePath
			)

	# Result is of type Record
	def FileHash(self, FilePath=defaultNamedNotOptArg, Options=defaultNamedNotOptArg):
		ret = self._oleobj_.InvokeTypes(47, LCID, 1, (9, 0), ((8, 1), (3, 1)),FilePath
			, Options)
		if ret is not None:
			ret = Dispatch(ret, 'FileHash', '{000C1093-0000-0000-C000-000000000046}', UnicodeToString=0)
		return ret

	def FileSignatureInfo(self, FilePath=defaultNamedNotOptArg, Options=defaultNamedNotOptArg, Format=defaultNamedNotOptArg):
		return self._ApplyTypes_(48, 1, (8209, 0), ((8, 1), (3, 1), (3, 1)), 'FileSignatureInfo', None,FilePath
			, Options, Format)

	def FileSize(self, FilePath=defaultNamedNotOptArg):
		return self._oleobj_.InvokeTypes(15, LCID, 1, (3, 0), ((8, 1),),FilePath
			)

	def FileVersion(self, FilePath=defaultNamedNotOptArg, Language=defaultNamedOptArg):
		# Result is a Unicode object - return as-is for this version of Python
		return self._oleobj_.InvokeTypes(16, LCID, 1, (8, 0), ((8, 1), (12, 17)),FilePath
			, Language)

	def ForceSourceListResolution(self, Product=defaultNamedNotOptArg, User=defaultNamedNotOptArg):
		return self._oleobj_.InvokeTypes(45, LCID, 1, (24, 0), ((8, 1), (8, 1)),Product
			, User)

	# Result is of type Record
	# The method GetShortcutTarget is actually a property, but must be used as a method to correctly pass the arguments
	def GetShortcutTarget(self, ShortcutPath=defaultNamedNotOptArg):
		ret = self._oleobj_.InvokeTypes(46, LCID, 2, (9, 0), ((8, 1),),ShortcutPath
			)
		if ret is not None:
			ret = Dispatch(ret, 'GetShortcutTarget', '{000C1093-0000-0000-C000-000000000046}', UnicodeToString=0)
		return ret

	def InstallProduct(self, PackagePath=defaultNamedNotOptArg, PropertyValues='0'):
		return self._ApplyTypes_(8, 1, (24, 32), ((8, 1), (8, 49)), 'InstallProduct', None,PackagePath
			, PropertyValues)

	# Result is of type Record
	def LastErrorRecord(self):
		ret = self._oleobj_.InvokeTypes(10, LCID, 1, (9, 0), (),)
		if ret is not None:
			ret = Dispatch(ret, 'LastErrorRecord', '{000C1093-0000-0000-C000-000000000046}', UnicodeToString=0)
		return ret

	# Result is of type Database
	def OpenDatabase(self, DatabasePath=defaultNamedNotOptArg, OpenMode=defaultNamedNotOptArg):
		ret = self._oleobj_.InvokeTypes(4, LCID, 1, (9, 0), ((8, 1), (12, 1)),DatabasePath
			, OpenMode)
		if ret is not None:
			ret = Dispatch(ret, 'OpenDatabase', '{000C109D-0000-0000-C000-000000000046}', UnicodeToString=0)
		return ret

	# Result is of type Session
	def OpenPackage(self, PackagePath=defaultNamedNotOptArg, Options=0):
		ret = self._oleobj_.InvokeTypes(2, LCID, 1, (9, 0), ((12, 1), (3, 49)),PackagePath
			, Options)
		if ret is not None:
			ret = Dispatch(ret, 'OpenPackage', '{000C109E-0000-0000-C000-000000000046}', UnicodeToString=0)
		return ret

	# Result is of type Session
	def OpenProduct(self, ProductCode=defaultNamedNotOptArg):
		ret = self._oleobj_.InvokeTypes(3, LCID, 1, (9, 0), ((8, 1),),ProductCode
			)
		if ret is not None:
			ret = Dispatch(ret, 'OpenProduct', '{000C109E-0000-0000-C000-000000000046}', UnicodeToString=0)
		return ret

	# The method Patch is actually a property, but must be used as a method to correctly pass the arguments
	def Patch(self, PatchCode=defaultNamedNotOptArg, ProductCode=defaultNamedNotOptArg, UserSid=defaultNamedNotOptArg, iContext=defaultNamedNotOptArg
			, retval=pythoncom.Missing):
		return self._ApplyTypes_(56, 2, (3, 0), ((8, 1), (8, 1), (8, 1), (3, 1), (16393, 10)), 'Patch', None,PatchCode
			, ProductCode, UserSid, iContext, retval)

	# The method PatchInfo is actually a property, but must be used as a method to correctly pass the arguments
	def PatchInfo(self, Patch=defaultNamedNotOptArg, Attribute=defaultNamedNotOptArg):
		# Result is a Unicode object - return as-is for this version of Python
		return self._oleobj_.InvokeTypes(41, LCID, 2, (8, 0), ((8, 1), (8, 1)),Patch
			, Attribute)

	# The method PatchTransforms is actually a property, but must be used as a method to correctly pass the arguments
	def PatchTransforms(self, Product=defaultNamedNotOptArg, Patch=defaultNamedNotOptArg):
		# Result is a Unicode object - return as-is for this version of Python
		return self._oleobj_.InvokeTypes(42, LCID, 2, (8, 0), ((8, 1), (8, 1)),Product
			, Patch)

	# Result is of type StringList
	# The method Patches is actually a property, but must be used as a method to correctly pass the arguments
	def Patches(self, Product=defaultNamedNotOptArg):
		ret = self._oleobj_.InvokeTypes(39, LCID, 2, (9, 0), ((8, 1),),Product
			)
		if ret is not None:
			ret = Dispatch(ret, 'Patches', '{000C1095-0000-0000-C000-000000000046}', UnicodeToString=0)
		return ret

	# Result is of type RecordList
	# The method PatchesEx is actually a property, but must be used as a method to correctly pass the arguments
	def PatchesEx(self, Product=defaultNamedNotOptArg, UserSid=defaultNamedNotOptArg, Contexts=defaultNamedNotOptArg, filter=defaultNamedNotOptArg):
		ret = self._oleobj_.InvokeTypes(55, LCID, 2, (9, 0), ((8, 1), (8, 1), (3, 1), (3, 1)),Product
			, UserSid, Contexts, filter)
		if ret is not None:
			ret = Dispatch(ret, 'PatchesEx', '{000C1096-0000-0000-C000-000000000046}', UnicodeToString=0)
		return ret

	# The method Product is actually a property, but must be used as a method to correctly pass the arguments
	def Product(self, Product=defaultNamedNotOptArg, UserSid=defaultNamedNotOptArg, iContext=defaultNamedNotOptArg, retval=pythoncom.Missing):
		return self._ApplyTypes_(53, 2, (3, 0), ((8, 1), (8, 1), (3, 1), (16393, 10)), 'Product', None,Product
			, UserSid, iContext, retval)

	# The method ProductInfo is actually a property, but must be used as a method to correctly pass the arguments
	def ProductInfo(self, Product=defaultNamedNotOptArg, Attribute=defaultNamedNotOptArg):
		# Result is a Unicode object - return as-is for this version of Python
		return self._oleobj_.InvokeTypes(18, LCID, 2, (8, 0), ((8, 1), (8, 1)),Product
			, Attribute)

	# The method ProductState is actually a property, but must be used as a method to correctly pass the arguments
	def ProductState(self, Product=defaultNamedNotOptArg):
		return self._oleobj_.InvokeTypes(17, LCID, 2, (3, 0), ((8, 1),),Product
			)

	# Result is of type RecordList
	# The method ProductsEx is actually a property, but must be used as a method to correctly pass the arguments
	def ProductsEx(self, Product=defaultNamedNotOptArg, UserSid=defaultNamedNotOptArg, Contexts=defaultNamedNotOptArg):
		ret = self._oleobj_.InvokeTypes(52, LCID, 2, (9, 0), ((8, 1), (8, 1), (3, 1)),Product
			, UserSid, Contexts)
		if ret is not None:
			ret = Dispatch(ret, 'ProductsEx', '{000C1096-0000-0000-C000-000000000046}', UnicodeToString=0)
		return ret

	def ProvideComponent(self, Product=defaultNamedNotOptArg, Feature=defaultNamedNotOptArg, Component=defaultNamedNotOptArg, InstallMode=defaultNamedNotOptArg):
		# Result is a Unicode object - return as-is for this version of Python
		return self._oleobj_.InvokeTypes(30, LCID, 1, (8, 0), ((8, 1), (8, 1), (8, 1), (3, 1)),Product
			, Feature, Component, InstallMode)

	def ProvideQualifiedComponent(self, Category=defaultNamedNotOptArg, Qualifier=defaultNamedNotOptArg, InstallMode=defaultNamedNotOptArg):
		# Result is a Unicode object - return as-is for this version of Python
		return self._oleobj_.InvokeTypes(32, LCID, 1, (8, 0), ((8, 1), (8, 1), (3, 1)),Category
			, Qualifier, InstallMode)

	# The method QualifierDescription is actually a property, but must be used as a method to correctly pass the arguments
	def QualifierDescription(self, Category=defaultNamedNotOptArg, Qualifier=defaultNamedNotOptArg):
		# Result is a Unicode object - return as-is for this version of Python
		return self._oleobj_.InvokeTypes(33, LCID, 2, (8, 0), ((8, 1), (8, 1)),Category
			, Qualifier)

	def RegistryValue(self, Root=defaultNamedNotOptArg, Key=defaultNamedNotOptArg, Value=defaultNamedOptArg):
		# Result is a Unicode object - return as-is for this version of Python
		return self._oleobj_.InvokeTypes(11, LCID, 1, (8, 0), ((12, 1), (8, 1), (12, 17)),Root
			, Key, Value)

	def ReinstallFeature(self, Product=defaultNamedNotOptArg, Feature=defaultNamedNotOptArg, ReinstallMode=defaultNamedNotOptArg):
		return self._oleobj_.InvokeTypes(29, LCID, 1, (24, 0), ((8, 1), (8, 1), (3, 1)),Product
			, Feature, ReinstallMode)

	def ReinstallProduct(self, Product=defaultNamedNotOptArg, ReinstallMode=defaultNamedNotOptArg):
		return self._oleobj_.InvokeTypes(20, LCID, 1, (24, 0), ((8, 1), (3, 1)),Product
			, ReinstallMode)

	# Result is of type StringList
	# The method RelatedProducts is actually a property, but must be used as a method to correctly pass the arguments
	def RelatedProducts(self, UpgradeCode=defaultNamedNotOptArg):
		ret = self._oleobj_.InvokeTypes(40, LCID, 2, (9, 0), ((8, 1),),UpgradeCode
			)
		if ret is not None:
			ret = Dispatch(ret, 'RelatedProducts', '{000C1095-0000-0000-C000-000000000046}', UnicodeToString=0)
		return ret

	def RemovePatches(self, PatchList=defaultNamedNotOptArg, Product=defaultNamedNotOptArg, UninstallType=defaultNamedNotOptArg, PropertyList='0'):
		return self._ApplyTypes_(49, 1, (24, 32), ((8, 1), (8, 1), (3, 1), (8, 49)), 'RemovePatches', None,PatchList
			, Product, UninstallType, PropertyList)

	# The method SetEnvironment is actually a property, but must be used as a method to correctly pass the arguments
	def SetEnvironment(self, Variable=defaultNamedNotOptArg, arg1=defaultUnnamedArg):
		return self._oleobj_.InvokeTypes(12, LCID, 4, (24, 0), ((8, 1), (8, 1)),Variable
			, arg1)

	# Result is of type SummaryInfo
	# The method SummaryInformation is actually a property, but must be used as a method to correctly pass the arguments
	def SummaryInformation(self, PackagePath=defaultNamedNotOptArg, UpdateCount=0):
		ret = self._oleobj_.InvokeTypes(5, LCID, 2, (9, 0), ((8, 1), (3, 49)),PackagePath
			, UpdateCount)
		if ret is not None:
			ret = Dispatch(ret, 'SummaryInformation', '{000C109B-0000-0000-C000-000000000046}', UnicodeToString=0)
		return ret

	def UseFeature(self, Product=defaultNamedNotOptArg, Feature=defaultNamedNotOptArg, InstallMode=defaultNamedNotOptArg):
		return self._oleobj_.InvokeTypes(25, LCID, 1, (24, 0), ((8, 1), (8, 1), (3, 1)),Product
			, Feature, InstallMode)

	_prop_map_get_ = {
		"UILevel": (6, 2, (3, 0), (), "UILevel", None),
		# Method 'Components' returns object of type 'StringList'
		"Components": (37, 2, (9, 0), (), "Components", '{000C1095-0000-0000-C000-000000000046}'),
		# Method 'Products' returns object of type 'StringList'
		"Products": (35, 2, (9, 0), (), "Products", '{000C1095-0000-0000-C000-000000000046}'),
		"Version": (9, 2, (8, 0), (), "Version", None),
	}
	_prop_map_put_ = {
		"UILevel" : ((6, LCID, 4, 0),()),
	}

class Patch(DispatchBaseClass):
	CLSID = IID('{000C10A1-0000-0000-C000-000000000046}')
	coclass_clsid = None

	# The method PatchProperty is actually a property, but must be used as a method to correctly pass the arguments
	def PatchProperty(self, Property=defaultNamedNotOptArg, Value=pythoncom.Missing):
		return self._ApplyTypes_(15, 2, (3, 0), ((8, 1), (16392, 10)), 'PatchProperty', None,Property
			, Value)

	# The method SetSourceListInfo is actually a property, but must be used as a method to correctly pass the arguments
	def SetSourceListInfo(self, Property=defaultNamedNotOptArg, retval=defaultNamedNotOptArg):
		return self._oleobj_.InvokeTypes(14, LCID, 4, (3, 0), ((8, 1), (8, 1)),Property
			, retval)

	def SourceListAddMediaDisk(self, dwDiskId=defaultNamedNotOptArg, VolumeLabel=defaultNamedNotOptArg, DiskPrompt=defaultNamedNotOptArg):
		return self._oleobj_.InvokeTypes(7, LCID, 1, (3, 0), ((3, 1), (8, 1), (8, 1)),dwDiskId
			, VolumeLabel, DiskPrompt)

	def SourceListAddSource(self, iSourceType=defaultNamedNotOptArg, Source=defaultNamedNotOptArg, dwIndex=defaultNamedNotOptArg):
		return self._oleobj_.InvokeTypes(6, LCID, 1, (3, 0), ((3, 1), (8, 1), (3, 1)),iSourceType
			, Source, dwIndex)

	def SourceListClearAll(self, iSourceType=defaultNamedNotOptArg):
		return self._oleobj_.InvokeTypes(10, LCID, 1, (3, 0), ((3, 1),),iSourceType
			)

	def SourceListClearMediaDisk(self, iDiskId=defaultNamedNotOptArg):
		return self._oleobj_.InvokeTypes(9, LCID, 1, (3, 0), ((3, 1),),iDiskId
			)

	def SourceListClearSource(self, iSourceType=defaultNamedNotOptArg, Source=defaultNamedNotOptArg):
		return self._oleobj_.InvokeTypes(8, LCID, 1, (3, 0), ((3, 1), (8, 1)),iSourceType
			, Source)

	def SourceListForceResolution(self):
		return self._oleobj_.InvokeTypes(11, LCID, 1, (3, 0), (),)

	# The method SourceListInfo is actually a property, but must be used as a method to correctly pass the arguments
	def SourceListInfo(self, Property=defaultNamedNotOptArg, retval=pythoncom.Missing):
		return self._ApplyTypes_(14, 2, (3, 0), ((8, 1), (16392, 10)), 'SourceListInfo', None,Property
			, retval)

	# The method Sources is actually a property, but must be used as a method to correctly pass the arguments
	def Sources(self, SourceType=defaultNamedNotOptArg, retval=pythoncom.Missing):
		return self._ApplyTypes_(12, 2, (3, 0), ((3, 1), (16393, 10)), 'Sources', None,SourceType
			, retval)

	_prop_map_get_ = {
		"Context": (4, 2, (3, 0), ((16387, 10),), "Context", None),
		"MediaDisks": (13, 2, (3, 0), ((16393, 10),), "MediaDisks", None),
		"PatchCode": (1, 2, (3, 0), ((16392, 10),), "PatchCode", None),
		"ProductCode": (2, 2, (3, 0), ((16392, 10),), "ProductCode", None),
		"State": (5, 2, (3, 0), ((16387, 10),), "State", None),
		"UserSid": (3, 2, (3, 0), ((16392, 10),), "UserSid", None),
	}
	_prop_map_put_ = {
	}

class Product(DispatchBaseClass):
	CLSID = IID('{000C10A0-0000-0000-C000-000000000046}')
	coclass_clsid = None

	# The method ComponentState is actually a property, but must be used as a method to correctly pass the arguments
	def ComponentState(self, Component=defaultNamedNotOptArg, retval=pythoncom.Missing):
		return self._ApplyTypes_(6, 2, (3, 0), ((8, 1), (16387, 10)), 'ComponentState', None,Component
			, retval)

	# The method FeatureState is actually a property, but must be used as a method to correctly pass the arguments
	def FeatureState(self, Feature=defaultNamedNotOptArg, retval=pythoncom.Missing):
		return self._ApplyTypes_(7, 2, (3, 0), ((8, 1), (16387, 10)), 'FeatureState', None,Feature
			, retval)

	# The method InstallProperty is actually a property, but must be used as a method to correctly pass the arguments
	def InstallProperty(self, Name=defaultNamedNotOptArg, retval=pythoncom.Missing):
		return self._ApplyTypes_(5, 2, (3, 0), ((8, 1), (16392, 10)), 'InstallProperty', None,Name
			, retval)

	# The method SetSourceListInfo is actually a property, but must be used as a method to correctly pass the arguments
	def SetSourceListInfo(self, Property=defaultNamedNotOptArg, retval=defaultNamedNotOptArg):
		return self._oleobj_.InvokeTypes(16, LCID, 4, (3, 0), ((8, 1), (8, 1)),Property
			, retval)

	def SourceListAddMediaDisk(self, dwDiskId=defaultNamedNotOptArg, VolumeLabel=defaultNamedNotOptArg, DiskPrompt=defaultNamedNotOptArg):
		return self._oleobj_.InvokeTypes(9, LCID, 1, (3, 0), ((3, 1), (8, 1), (8, 1)),dwDiskId
			, VolumeLabel, DiskPrompt)

	def SourceListAddSource(self, iSourceType=defaultNamedNotOptArg, Source=defaultNamedNotOptArg, dwIndex=defaultNamedNotOptArg):
		return self._oleobj_.InvokeTypes(8, LCID, 1, (3, 0), ((3, 1), (8, 1), (3, 1)),iSourceType
			, Source, dwIndex)

	def SourceListClearAll(self, iSourceType=defaultNamedNotOptArg):
		return self._oleobj_.InvokeTypes(12, LCID, 1, (3, 0), ((3, 1),),iSourceType
			)

	def SourceListClearMediaDisk(self, iDiskId=defaultNamedNotOptArg):
		return self._oleobj_.InvokeTypes(11, LCID, 1, (3, 0), ((3, 1),),iDiskId
			)

	def SourceListClearSource(self, iSourceType=defaultNamedNotOptArg, Source=defaultNamedNotOptArg):
		return self._oleobj_.InvokeTypes(10, LCID, 1, (3, 0), ((3, 1), (8, 1)),iSourceType
			, Source)

	def SourceListForceResolution(self):
		return self._oleobj_.InvokeTypes(13, LCID, 1, (3, 0), (),)

	# The method SourceListInfo is actually a property, but must be used as a method to correctly pass the arguments
	def SourceListInfo(self, Property=defaultNamedNotOptArg, retval=pythoncom.Missing):
		return self._ApplyTypes_(16, 2, (3, 0), ((8, 1), (16392, 10)), 'SourceListInfo', None,Property
			, retval)

	# The method Sources is actually a property, but must be used as a method to correctly pass the arguments
	def Sources(self, SourceType=defaultNamedNotOptArg, retval=pythoncom.Missing):
		return self._ApplyTypes_(14, 2, (3, 0), ((3, 1), (16393, 10)), 'Sources', None,SourceType
			, retval)

	_prop_map_get_ = {
		"Context": (3, 2, (3, 0), ((16387, 10),), "Context", None),
		"MediaDisks": (15, 2, (3, 0), ((16393, 10),), "MediaDisks", None),
		"ProductCode": (1, 2, (3, 0), ((16392, 10),), "ProductCode", None),
		"State": (4, 2, (3, 0), ((16387, 10),), "State", None),
		"UserSid": (2, 2, (3, 0), ((16392, 10),), "UserSid", None),
	}
	_prop_map_put_ = {
	}

class Record(DispatchBaseClass):
	CLSID = IID('{000C1093-0000-0000-C000-000000000046}')
	coclass_clsid = None

	def ClearData(self):
		return self._oleobj_.InvokeTypes(7, LCID, 1, (24, 0), (),)

	# The method DataSize is actually a property, but must be used as a method to correctly pass the arguments
	def DataSize(self, Field=defaultNamedNotOptArg):
		return self._oleobj_.InvokeTypes(5, LCID, 2, (3, 0), ((3, 1),),Field
			)

	def FormatText(self):
		# Result is a Unicode object - return as-is for this version of Python
		return self._oleobj_.InvokeTypes(8, LCID, 1, (8, 0), (),)

	# The method IntegerData is actually a property, but must be used as a method to correctly pass the arguments
	def IntegerData(self, Field=defaultNamedNotOptArg):
		return self._oleobj_.InvokeTypes(2, LCID, 2, (3, 0), ((3, 1),),Field
			)

	# The method IsNull is actually a property, but must be used as a method to correctly pass the arguments
	def IsNull(self, Field=defaultNamedNotOptArg):
		return self._oleobj_.InvokeTypes(6, LCID, 2, (11, 0), ((3, 1),),Field
			)

	def ReadStream(self, Field=defaultNamedNotOptArg, Length=defaultNamedNotOptArg, Format=defaultNamedNotOptArg):
		# Result is a Unicode object - return as-is for this version of Python
		return self._oleobj_.InvokeTypes(4, LCID, 1, (8, 0), ((3, 1), (3, 1), (3, 1)),Field
			, Length, Format)

	# The method SetIntegerData is actually a property, but must be used as a method to correctly pass the arguments
	def SetIntegerData(self, Field=defaultNamedNotOptArg, arg1=defaultUnnamedArg):
		return self._oleobj_.InvokeTypes(2, LCID, 4, (24, 0), ((3, 1), (3, 1)),Field
			, arg1)

	def SetStream(self, Field=defaultNamedNotOptArg, FilePath=defaultNamedNotOptArg):
		return self._oleobj_.InvokeTypes(3, LCID, 1, (24, 0), ((3, 1), (8, 1)),Field
			, FilePath)

	# The method SetStringData is actually a property, but must be used as a method to correctly pass the arguments
	def SetStringData(self, Field=defaultNamedNotOptArg, arg1=defaultUnnamedArg):
		return self._oleobj_.InvokeTypes(1, LCID, 4, (24, 0), ((3, 1), (8, 1)),Field
			, arg1)

	# The method StringData is actually a property, but must be used as a method to correctly pass the arguments
	def StringData(self, Field=defaultNamedNotOptArg):
		# Result is a Unicode object - return as-is for this version of Python
		return self._oleobj_.InvokeTypes(1, LCID, 2, (8, 0), ((3, 1),),Field
			)

	_prop_map_get_ = {
		"FieldCount": (0, 2, (3, 0), (), "FieldCount", None),
	}
	_prop_map_put_ = {
	}
	# Default property for this class is 'FieldCount'
	def __call__(self):
		return self._ApplyTypes_(*(0, 2, (3, 0), (), "FieldCount", None))
	# str(ob) and int(ob) will use __call__
	def __unicode__(self, *args):
		try:
			return unicode(self.__call__(*args))
		except pythoncom.com_error:
			return repr(self)
	def __str__(self, *args):
		return str(self.__unicode__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))

class RecordList(DispatchBaseClass):
	CLSID = IID('{000C1096-0000-0000-C000-000000000046}')
	coclass_clsid = None

	# Result is of type Record
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index=defaultNamedNotOptArg):
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((3, 0),),Index
			)
		if ret is not None:
			ret = Dispatch(ret, 'Item', '{000C1093-0000-0000-C000-000000000046}', UnicodeToString=0)
		return ret

	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
	}
	_prop_map_put_ = {
	}
	# Default method for this class is 'Item'
	def __call__(self, Index=defaultNamedNotOptArg):
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((3, 0),),Index
			)
		if ret is not None:
			ret = Dispatch(ret, '__call__', '{000C1093-0000-0000-C000-000000000046}', UnicodeToString=0)
		return ret

	# str(ob) and int(ob) will use __call__
	def __unicode__(self, *args):
		try:
			return unicode(self.__call__(*args))
		except pythoncom.com_error:
			return repr(self)
	def __str__(self, *args):
		return str(self.__unicode__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		ob = self._oleobj_.InvokeTypes(-4,LCID,1,(13, 10),())
		return win32com.client.util.Iterator(ob)
	def _NewEnum(self):
		"Create an enumerator from this object"
		return win32com.client.util.WrapEnum(self._oleobj_.InvokeTypes(-4,LCID,1,(13, 10),()),'{000C1093-0000-0000-C000-000000000046}')
	def __getitem__(self, index):
		"Allow this class to be accessed as a collection"
		if not self.__dict__.has_key('_enum_'):
			self.__dict__['_enum_'] = self._NewEnum()
		return self._enum_.__getitem__(index)
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class Session(DispatchBaseClass):
	CLSID = IID('{000C109E-0000-0000-C000-000000000046}')
	coclass_clsid = None

	# Result is of type RecordList
	# The method ComponentCosts is actually a property, but must be used as a method to correctly pass the arguments
	def ComponentCosts(self, Component=defaultNamedNotOptArg, State=defaultNamedNotOptArg):
		ret = self._oleobj_.InvokeTypes(23, LCID, 2, (9, 0), ((8, 1), (3, 1)),Component
			, State)
		if ret is not None:
			ret = Dispatch(ret, 'ComponentCosts', '{000C1096-0000-0000-C000-000000000046}', UnicodeToString=0)
		return ret

	# The method ComponentCurrentState is actually a property, but must be used as a method to correctly pass the arguments
	def ComponentCurrentState(self, Component=defaultNamedNotOptArg):
		return self._oleobj_.InvokeTypes(17, LCID, 2, (3, 0), ((8, 1),),Component
			)

	# The method ComponentRequestState is actually a property, but must be used as a method to correctly pass the arguments
	def ComponentRequestState(self, Component=defaultNamedNotOptArg):
		return self._oleobj_.InvokeTypes(18, LCID, 2, (3, 0), ((8, 1),),Component
			)

	def DoAction(self, Action=defaultNamedNotOptArg):
		return self._oleobj_.InvokeTypes(8, LCID, 1, (3, 0), ((8, 1),),Action
			)

	def EvaluateCondition(self, Expression=defaultNamedNotOptArg):
		return self._oleobj_.InvokeTypes(10, LCID, 1, (3, 0), ((8, 1),),Expression
			)

	# The method FeatureCost is actually a property, but must be used as a method to correctly pass the arguments
	def FeatureCost(self, Feature=defaultNamedNotOptArg, CostTree=defaultNamedNotOptArg, State=defaultNamedNotOptArg):
		return self._oleobj_.InvokeTypes(16, LCID, 2, (3, 0), ((8, 1), (3, 1), (3, 1)),Feature
			, CostTree, State)

	# The method FeatureCurrentState is actually a property, but must be used as a method to correctly pass the arguments
	def FeatureCurrentState(self, Feature=defaultNamedNotOptArg):
		return self._oleobj_.InvokeTypes(13, LCID, 2, (3, 0), ((8, 1),),Feature
			)

	# Result is of type FeatureInfo
	# The method FeatureInfo is actually a property, but must be used as a method to correctly pass the arguments
	def FeatureInfo(self, Feature=defaultNamedNotOptArg):
		ret = self._oleobj_.InvokeTypes(22, LCID, 2, (9, 0), ((8, 1),),Feature
			)
		if ret is not None:
			ret = Dispatch(ret, 'FeatureInfo', '{000C109F-0000-0000-C000-000000000046}', UnicodeToString=0)
		return ret

	# The method FeatureRequestState is actually a property, but must be used as a method to correctly pass the arguments
	def FeatureRequestState(self, Feature=defaultNamedNotOptArg):
		return self._oleobj_.InvokeTypes(14, LCID, 2, (3, 0), ((8, 1),),Feature
			)

	# The method FeatureValidStates is actually a property, but must be used as a method to correctly pass the arguments
	def FeatureValidStates(self, Feature=defaultNamedNotOptArg):
		return self._oleobj_.InvokeTypes(15, LCID, 2, (3, 0), ((8, 1),),Feature
			)

	def FormatRecord(self, Record=defaultNamedNotOptArg):
		# Result is a Unicode object - return as-is for this version of Python
		return self._oleobj_.InvokeTypes(11, LCID, 1, (8, 0), ((9, 1),),Record
			)

	def Message(self, Kind=defaultNamedNotOptArg, Record=defaultNamedNotOptArg):
		return self._oleobj_.InvokeTypes(12, LCID, 1, (3, 0), ((3, 1), (9, 1)),Kind
			, Record)

	# The method Mode is actually a property, but must be used as a method to correctly pass the arguments
	def Mode(self, Flag=defaultNamedNotOptArg):
		return self._oleobj_.InvokeTypes(4, LCID, 2, (11, 0), ((3, 1),),Flag
			)

	# The method ProductProperty is actually a property, but must be used as a method to correctly pass the arguments
	def ProductProperty(self, Property=defaultNamedNotOptArg):
		# Result is a Unicode object - return as-is for this version of Python
		return self._oleobj_.InvokeTypes(21, LCID, 2, (8, 0), ((8, 1),),Property
			)

	# The method Property is actually a property, but must be used as a method to correctly pass the arguments
	def Property(self, Name=defaultNamedNotOptArg):
		# Result is a Unicode object - return as-is for this version of Python
		return self._oleobj_.InvokeTypes(2, LCID, 2, (8, 0), ((8, 1),),Name
			)

	def Sequence(self, Table=defaultNamedNotOptArg, Mode=defaultNamedOptArg):
		return self._oleobj_.InvokeTypes(9, LCID, 1, (3, 0), ((8, 1), (12, 17)),Table
			, Mode)

	# The method SetComponentRequestState is actually a property, but must be used as a method to correctly pass the arguments
	def SetComponentRequestState(self, Component=defaultNamedNotOptArg, arg1=defaultUnnamedArg):
		return self._oleobj_.InvokeTypes(18, LCID, 4, (24, 0), ((8, 1), (3, 1)),Component
			, arg1)

	# The method SetFeatureRequestState is actually a property, but must be used as a method to correctly pass the arguments
	def SetFeatureRequestState(self, Feature=defaultNamedNotOptArg, arg1=defaultUnnamedArg):
		return self._oleobj_.InvokeTypes(14, LCID, 4, (24, 0), ((8, 1), (3, 1)),Feature
			, arg1)

	def SetInstallLevel(self, Level=defaultNamedNotOptArg):
		return self._oleobj_.InvokeTypes(19, LCID, 1, (24, 0), ((3, 1),),Level
			)

	# The method SetMode is actually a property, but must be used as a method to correctly pass the arguments
	def SetMode(self, Flag=defaultNamedNotOptArg, arg1=defaultUnnamedArg):
		return self._oleobj_.InvokeTypes(4, LCID, 4, (24, 0), ((3, 1), (11, 1)),Flag
			, arg1)

	# The method SetProperty is actually a property, but must be used as a method to correctly pass the arguments
	def SetProperty(self, Name=defaultNamedNotOptArg, arg1=defaultUnnamedArg):
		return self._oleobj_.InvokeTypes(2, LCID, 4, (24, 0), ((8, 1), (8, 1)),Name
			, arg1)

	# The method SetTargetPath is actually a property, but must be used as a method to correctly pass the arguments
	def SetTargetPath(self, Folder=defaultNamedNotOptArg, arg1=defaultUnnamedArg):
		return self._oleobj_.InvokeTypes(7, LCID, 4, (24, 0), ((8, 1), (8, 1)),Folder
			, arg1)

	# The method SourcePath is actually a property, but must be used as a method to correctly pass the arguments
	def SourcePath(self, Folder=defaultNamedNotOptArg):
		# Result is a Unicode object - return as-is for this version of Python
		return self._oleobj_.InvokeTypes(6, LCID, 2, (8, 0), ((8, 1),),Folder
			)

	# The method TargetPath is actually a property, but must be used as a method to correctly pass the arguments
	def TargetPath(self, Folder=defaultNamedNotOptArg):
		# Result is a Unicode object - return as-is for this version of Python
		return self._oleobj_.InvokeTypes(7, LCID, 2, (8, 0), ((8, 1),),Folder
			)

	_prop_map_get_ = {
		# Method 'Database' returns object of type 'Database'
		"Database": (5, 2, (9, 0), (), "Database", '{000C109D-0000-0000-C000-000000000046}'),
		# Method 'Installer' returns object of type 'Installer'
		"Installer": (1, 2, (9, 0), (), "Installer", '{000C1090-0000-0000-C000-000000000046}'),
		"Language": (3, 2, (3, 0), (), "Language", None),
		"VerifyDiskSpace": (20, 2, (11, 0), (), "VerifyDiskSpace", None),
	}
	_prop_map_put_ = {
	}

class StringList(DispatchBaseClass):
	CLSID = IID('{000C1095-0000-0000-C000-000000000046}')
	coclass_clsid = None

	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index=defaultNamedNotOptArg):
		# Result is a Unicode object - return as-is for this version of Python
		return self._oleobj_.InvokeTypes(0, LCID, 2, (8, 0), ((3, 0),),Index
			)

	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
	}
	_prop_map_put_ = {
	}
	# Default method for this class is 'Item'
	def __call__(self, Index=defaultNamedNotOptArg):
		# Result is a Unicode object - return as-is for this version of Python
		return self._oleobj_.InvokeTypes(0, LCID, 2, (8, 0), ((3, 0),),Index
			)

	# str(ob) and int(ob) will use __call__
	def __unicode__(self, *args):
		try:
			return unicode(self.__call__(*args))
		except pythoncom.com_error:
			return repr(self)
	def __str__(self, *args):
		return str(self.__unicode__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		ob = self._oleobj_.InvokeTypes(-4,LCID,1,(13, 10),())
		return win32com.client.util.Iterator(ob)
	def _NewEnum(self):
		"Create an enumerator from this object"
		return win32com.client.util.WrapEnum(self._oleobj_.InvokeTypes(-4,LCID,1,(13, 10),()),None)
	def __getitem__(self, index):
		"Allow this class to be accessed as a collection"
		if not self.__dict__.has_key('_enum_'):
			self.__dict__['_enum_'] = self._NewEnum()
		return self._enum_.__getitem__(index)
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class SummaryInfo(DispatchBaseClass):
	CLSID = IID('{000C109B-0000-0000-C000-000000000046}')
	coclass_clsid = None

	def Persist(self):
		return self._oleobj_.InvokeTypes(3, LCID, 1, (24, 0), (),)

	# The method Property is actually a property, but must be used as a method to correctly pass the arguments
	def Property(self, Pid=defaultNamedNotOptArg):
		return self._ApplyTypes_(1, 2, (12, 0), ((3, 1),), 'Property', None,Pid
			)

	# The method SetProperty is actually a property, but must be used as a method to correctly pass the arguments
	def SetProperty(self, Pid=defaultNamedNotOptArg, arg1=defaultUnnamedArg):
		return self._oleobj_.InvokeTypes(1, LCID, 4, (24, 0), ((3, 1), (12, 1)),Pid
			, arg1)

	_prop_map_get_ = {
		"PropertyCount": (2, 2, (3, 0), (), "PropertyCount", None),
	}
	_prop_map_put_ = {
	}

class UIPreview(DispatchBaseClass):
	CLSID = IID('{000C109A-0000-0000-C000-000000000046}')
	coclass_clsid = None

	# The method Property is actually a property, but must be used as a method to correctly pass the arguments
	def Property(self, Name=defaultNamedNotOptArg):
		# Result is a Unicode object - return as-is for this version of Python
		return self._oleobj_.InvokeTypes(1, LCID, 2, (8, 0), ((8, 1),),Name
			)

	# The method SetProperty is actually a property, but must be used as a method to correctly pass the arguments
	def SetProperty(self, Name=defaultNamedNotOptArg, arg1=defaultUnnamedArg):
		return self._oleobj_.InvokeTypes(1, LCID, 4, (24, 0), ((8, 1), (8, 1)),Name
			, arg1)

	def ViewBillboard(self, Control=defaultNamedNotOptArg, Billboard=defaultNamedNotOptArg):
		return self._oleobj_.InvokeTypes(3, LCID, 1, (24, 0), ((8, 1), (8, 1)),Control
			, Billboard)

	def ViewDialog(self, Dialog=defaultNamedNotOptArg):
		return self._oleobj_.InvokeTypes(2, LCID, 1, (24, 0), ((8, 1),),Dialog
			)

	_prop_map_get_ = {
	}
	_prop_map_put_ = {
	}

class View(DispatchBaseClass):
	CLSID = IID('{000C109C-0000-0000-C000-000000000046}')
	coclass_clsid = None

	def Close(self):
		return self._oleobj_.InvokeTypes(4, LCID, 1, (24, 0), (),)

	# Result is of type Record
	# The method ColumnInfo is actually a property, but must be used as a method to correctly pass the arguments
	def ColumnInfo(self, Info=defaultNamedNotOptArg):
		ret = self._oleobj_.InvokeTypes(5, LCID, 2, (9, 0), ((3, 1),),Info
			)
		if ret is not None:
			ret = Dispatch(ret, 'ColumnInfo', '{000C1093-0000-0000-C000-000000000046}', UnicodeToString=0)
		return ret

	def Execute(self, Params=0):
		return self._oleobj_.InvokeTypes(1, LCID, 1, (24, 0), ((9, 49),),Params
			)

	# Result is of type Record
	def Fetch(self):
		ret = self._oleobj_.InvokeTypes(2, LCID, 1, (9, 0), (),)
		if ret is not None:
			ret = Dispatch(ret, 'Fetch', '{000C1093-0000-0000-C000-000000000046}', UnicodeToString=0)
		return ret

	def GetError(self):
		# Result is a Unicode object - return as-is for this version of Python
		return self._oleobj_.InvokeTypes(6, LCID, 1, (8, 0), (),)

	def Modify(self, Mode=defaultNamedNotOptArg, Record=defaultNamedNotOptArg):
		return self._oleobj_.InvokeTypes(3, LCID, 1, (24, 0), ((3, 1), (9, 0)),Mode
			, Record)

	_prop_map_get_ = {
	}
	_prop_map_put_ = {
	}

RecordMap = {
}

CLSIDToClassMap = {
	'{000C10A0-0000-0000-C000-000000000046}' : Product,
	'{000C10A1-0000-0000-C000-000000000046}' : Patch,
	'{000C1090-0000-0000-C000-000000000046}' : Installer,
	'{000C1093-0000-0000-C000-000000000046}' : Record,
	'{000C1095-0000-0000-C000-000000000046}' : StringList,
	'{000C1096-0000-0000-C000-000000000046}' : RecordList,
	'{000C109A-0000-0000-C000-000000000046}' : UIPreview,
	'{000C109B-0000-0000-C000-000000000046}' : SummaryInfo,
	'{000C109C-0000-0000-C000-000000000046}' : View,
	'{000C109D-0000-0000-C000-000000000046}' : Database,
	'{000C109E-0000-0000-C000-000000000046}' : Session,
	'{000C109F-0000-0000-C000-000000000046}' : FeatureInfo,
}
CLSIDToPackageMap = {}
win32com.client.CLSIDToClass.RegisterCLSIDsFromDict( CLSIDToClassMap )
VTablesToPackageMap = {}
VTablesToClassMap = {
}


NamesToIIDMap = {
	'Product' : '{000C10A0-0000-0000-C000-000000000046}',
	'RecordList' : '{000C1096-0000-0000-C000-000000000046}',
	'FeatureInfo' : '{000C109F-0000-0000-C000-000000000046}',
	'Database' : '{000C109D-0000-0000-C000-000000000046}',
	'Patch' : '{000C10A1-0000-0000-C000-000000000046}',
	'Record' : '{000C1093-0000-0000-C000-000000000046}',
	'UIPreview' : '{000C109A-0000-0000-C000-000000000046}',
	'Session' : '{000C109E-0000-0000-C000-000000000046}',
	'SummaryInfo' : '{000C109B-0000-0000-C000-000000000046}',
	'Installer' : '{000C1090-0000-0000-C000-000000000046}',
	'StringList' : '{000C1095-0000-0000-C000-000000000046}',
	'View' : '{000C109C-0000-0000-C000-000000000046}',
}

win32com.client.constants.__dicts__.append(constants.__dict__)

