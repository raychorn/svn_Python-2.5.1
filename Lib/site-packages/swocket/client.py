r"""A abstract class for use when implementing a dumb (probably debug)
client for the swocket protocol.  It is derived from asynchat.async_chat

The methods you should use:
handle_close()  - kill the connection
push(data)      - push an entire data packet to the server
                  (null termination is automatic)

"""
import asyncore,asynchat,socket

class swocket_client (asynchat.async_chat):
  """This is an abstract class, you must derive from this class and add
  these methods:
  onConnect()   - called when a connection has been established
  onClose()     - called when the connection has been lost
  onData(data)  - called when the entire data packet has arrived
                  (there is no trailing null terminator)

  The initialization method accepts two parameters: host, and port.
  It will attempt to make a socket connection to the specified host,
  on the specified port.  Pretty obvious behavior."""
  def __init__ (self, host, port):
    asynchat.async_chat.__init__ (self)
    self.create_socket (socket.AF_INET, socket.SOCK_STREAM)
    self.terminator = '\0'
    self.connected = 0
    self.connect((host,port))
    self.buffer = ''

  def collect_incoming_data (self, data):
    self.buffer += data
    
  def found_terminator (self):
    data=self.buffer
    self.buffer = ''
    self.onData(data)

  def handle_close (self):
    """call when you want to close the connection"""
    self.connected = 0
    self.onClose()
    asyncore.socket_map.clear()
    raise asyncore.ExitNow

  def handle_connect (self):
    self.connected = 1
    self.onConnect()

  def push (self, data):
    "pushes a data packet to the server, null termination is automatic"
    asynchat.async_chat.push(self, data+self.terminator)

  def log (self, *ignore):
    pass