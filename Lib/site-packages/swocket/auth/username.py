r"""simple username authorization, take a username
and authorize if they're not already connected"""

import string
from swocket import authorizeError

def authInit (parent, n):
    """no init step..."""
    return {}

def authFunction (passInfo):
    """check username existence and authorize"""
    parent = passInfo["self"]
    doc = passInfo["doc"]
    user = string.strip(findAttribute(doc.attributes,"user"))
    userKey = string.lower(user)
    if not parent.service.state.has_key("auth"):
        parent.service.state["auth"] = {}
    if parent.service.state["auth"].has_key(userKey): raise authorizeError("%s is already connected" % user)
    parent.service.state["auth"][userKey] = parent.id
    parent.cleanupList.append(cleanup)
    return {"user":user,"userKey":userKey}

def findAttribute (attributes,key):
    """see ldap if you cant figure it out"""
    try:
      val = attributes[key].value
    except:
      raise authorizeError("connect attribute %s missing or invalid" % key)
    return val

def cleanup (self):
    """cleanup on disconnect/logout"""
    del(self.service.state["auth"][self.auth["userKey"]])