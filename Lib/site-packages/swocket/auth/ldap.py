r"""example LDAP authentication module"""

import _ldap
from swocket import authorizeError

def authInit (parent, doc):
    """initialize ourselves on server start"""
    host=findAttribute(doc.attributes,"ldaphost",'localhost')
    port=int(findAttribute(doc.attributes,"ldapport",'389'))
    dsn=findAttribute(doc.attributes,"ldapbasedn")
    return {"host":host, "port":port, "dsn":dsn}

def authFunction (passInfo):
    """authorize a client"""
    parent = passInfo["self"]
    doc = passInfo["doc"]
    userKey = user = findAttribute(doc.attributes,"user")
    pw = findAttribute(doc.attributes,"password")
    host=parent.service.authState["host"]
    port=parent.service.authState["port"]
    dsn=parent.service.authState["dsn"]
    try:
      auth((host,port),dsn,user,pw)
    except _ldap.LDAPError,e:
      raise authorizeError("LDAP authorization failed %s/%s %s" % (user,pw,e))
    if not parent.service.state.has_key("auth"):
        parent.service.state["auth"] = {}
    if parent.service.state["auth"].has_key(userKey):
      raise authorizeError("%s is already connected" % user)
    parent.service.state["auth"][userKey] = parent.id
    parent.cleanupList.append(cleanup)
    return {"userKey":user,"user":user}

def auth(ldap_host,ldap_basedn,username,password):
     """ internal function to do the hard work"""
     l=_ldap.open(*ldap_host)
     l.simple_bind_s('cn=%s, %s' % (username,ldap_basedn), password)
     r = l.search_s(ldap_basedn, _ldap.SCOPE_SUBTREE, "cn=%s" % username)
     l.unbind_s()
     return r[0][1]

def findAttribute (attributes,key,default=None):
    """helper function to see if an xml attribute list has a certain key.
    accepts a default incase it doesn't exist, otherwise it raises an
    authorizeError"""
    try:
      val = attributes[key].value
    except:
      if not default==None: val=default
      else: raise authorizeError("attribute %s missing or invalid" % key)
    return val

def cleanup (self):
    """the cleanup process for the admin state data"""
    del(self.service.state["auth"][self.auth["userKey"]])