r"""This is an example of a simple mousetracker app."""

import string
from swocket import escape_markup,userNotFound,userError

def handlerInit(parent, n):
    """This handler requires no initialization routine,
    but must return a dict anyways"""
    return {"users":{}}

class handlerClass:
    """the handlerClass is where everything happens, we don't need auth for this one."""
    def __init__ (self, passInfo):
        self.parent=passInfo["self"]

    def __getattr__ (self, name):
        return getattr(self.parent,name)

    def onConnect (self):
        """Upon successful connect, the client broadcasts a
        login message to all other connected users to notify
        them to update their user lists, and sends a list of
        all _other_ connected users to the client"""
        self.service.moduleState["users"][self]=self.id
        self.sendEveryone(self.loginXML())
        self.users()
        self.log('CONNECT')
        
    def onXML (self,doc):
        """When it receives data from the client, it passes control
        over to another method.  If the method raises an exception,
        it closes the connection and prints a message to the server
        console.  It otherwise ignores unknown messages, valid messages are:
        
        <mousemsg x1="%d" y1="%d" x2="%d" y2="%d" />
        - sends mouse info
        
        <logout />
        - logout gracefully
        
        <users />
        - return the user list... which isn't necessary, but we already
          have the method to do it, so we might as well implement it in
          the case of a really dumb client, like simpleclient"""
        try:
            if    doc.nodeName == "mousemsg": self.mousemsg(doc)
            elif  doc.nodeName == "logout": self.error("logout")
            elif  doc.nodeName == "users": self.users()
        except:
            self.error("problem processing XML")
    
    def users (self):
        """Returns an xml document string of the current userlist"""
        xml=["<users>"]
        for (user,userKey) in self.service.moduleState["users"].items():
          if not user is self:
            try: 
              xml.append('<user userKey="%s" />' % userKey)
            except:
              pass
        xml.append("</users>")
        self.push(string.join(xml,''))
        
            
    def userError (self,error="something bad happened, its probably your fault"):
        """sends an <error value="%s" /> tag to the client, used if the client
        happens to send a tag with some invalid stuff in it, or they sent a message
        to a no longer existing 'userKey'"""
        self.push('<error value="%s" />' % escape_markup(error))

    def mousemsg (self,doc):
        """broadcasts a public message.  note: does NOT send to self"""
        try:
          myxml=['<mousemsg userKey="%s"' % self.id]
          for n in ('x1','y1','x2','y2'):
            if not doc.attributes.has_key(n): raise userError("no %s attribute"%n)
            nm=doc.attributes[n].value
            myxml.append('%s="%s"' % (n,nm))
          myxml.append('/>')
          self.sendEveryone(string.join(myxml,' '))
        except userError,e:
          self.userError("mousemsg: %s" % e)
          
    def onClose (self):
        """when disconnecting, send everyone else a logout message"""
        del(self.service.moduleState["users"][self])
        self.sendEveryone(self.logoutXML())
        self.log('LOGOUT')
          
    def sendEveryone (self, xml):
        """sends the xml string to all users except self"""
        for user in self.service.moduleState["users"].keys():
            if not user is self:
              try: user.push(xml)
              except: pass

    def loginXML (self):
        """returns a login tag xml string with the current user's info in it"""
        return '<login userKey="%s" />' % (self.id)

    def logoutXML (self):
        """returns a logout tag xml string with the current user's info"""
        return '<logout userKey="%s" />' %  (self.id)
