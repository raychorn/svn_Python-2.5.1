# swocket server core routines
#

import sys,asynchat,asyncore,socket,thread,string,exceptions,types,StringIO
import xml.dom.minidom as xmldom
def minidom_namednodemap_has_key(self, key):
  """a has_key method for minidom's namednodemap, because I like has_key"""
  if type(key) is xmldom._TupleType:
    return self._attrsNS.has_key(key)
  else:
    return self._attrs.has_key(key)
xmldom.NamedNodeMap.has_key = minidom_namednodemap_has_key

class swocketError:
  """simple base class for swocket errors"""
  def __init__(self, value):
    self.value = value
  def __str__(self):
    return self.value

class authorizeError(swocketError):
  """authorization error, for server and authentication module use"""

class configError(swocketError):
  """configuration error exception"""

class userNotFound(swocketError):
  """userNotFound exception"""

class userError(swocketError):
  """userError exception"""

#localize the string replace for speed, we call it a lot
_replace=string.replace
def escape_markup(str):
  """Takes a string and escapes it so it doesnt fuck up an XML document if you're doing it manually"""
  str=_replace(str,"<","&lt;")
  str=_replace(str,">","&gt;")
  str=_replace(str,"&","&amp;")
  return _replace(str,'"',"&quot;")

def string_import(name):
  """imports or reloads a module named by a string"""
  mod = None
  if sys.modules.has_key(name):
    mod = reload(sys.modules[name])
  else:
    mod = __import__(name)
    components = string.split(name,'.')
    for comp in components[1:]:
      mod = getattr(mod, comp)
  return mod